№1
let getPrice = function(hours, isImportant) {
  let price = 1500;
  if (isImportant) {
    hours/=2;
    price*=2.5;
  }
  if (hours > 150) {
    price-=250;
  }
  let finalPrice = hours * price;
  return finalPrice;
}

let getProfitableProject = function(hours, profit) {
  let firstVariant = getPrice(hours, true)-profit;
  let secondVariant = getPrice(hours, false);
  

  if (firstVariant < secondVariant) {
   return 'Выгодней срочный проект. Потратишь на него ' + firstVariant; 
  }
  else {
   return 'Выгодней обычный проект. Потратишь на него ' + secondVariant;
  }
  
}



/* Техническое задание

Мяу! Напиши программу getProfitableProject, которая определяет, какой проект выгодней: срочный или обычный.
Функция принимает на вход два параметра:

- время на проект в часах;
- прибыль, которую принесёт сайт, если будет сделан в срочном режиме.

Названия параметров могут быть любыми.

Внутри функции надо сравнить два проекта: срочный и обычный.

Обрати внимание, что срочный проект принесёт прибыль за то время, пока готовился бы обычный проект. Поэтому прибыль от срочного проекта нужно вычесть из его стоимости.

Функция getProfitableProject должна возвращать строку:


- 'Выгодней срочный проект. Потратишь на него ' + расходы — если срочный проект окажется дешевле обычного.
- 'Выгодней обычный проект. Потратишь на него ' + расходы — если обычный проект дешевле.

*/
---------------------------------------------------------------------------------------
№2

let checkVehicle = function(wheelCount, weight) {
  if (wheelCount === 2 && weight < 100) {
   return 'Парковка разрешена'; 
  }
  return 'Вам здесь не место! Мяу!';
}
/* Техническое задание

Мяу! Напиши программу для определения типа транспорта на велосипедной парковке.

Оформи решение в виде функции checkVehicle с двумя параметрами: количество колёс у транспорта и вес этого транспорта. Названия параметров могут быть любыми.

Если колеса два и вес транспорта меньше 100 кг, это велосипед. Функция должна возвращать строку 'Парковка разрешена'.

В остальных случаях функция должна возвращать строку 'Вам здесь не место! Мяу!'.

*/
----------------------------------------------------------------------------------------
№4
let calculate = function(firstNumber, secondNumber, operator) {
  let fNumb=Number(firstNumber);
  let sNumb=Number(secondNumber);
  
  if(operator === '+') {
    return fNumb+sNumb;
  }
  if(operator === '-') {
    return fNumb-sNumb;
  }
  if(operator === '/') {
    return fNumb/sNumb;
  }
  if(operator === '*') {
    return fNumb*sNumb;
  }
}

/* Техническое задание

Мяу! Напиши функцию calculate, которая будет распознавать пользовательский ввод, совершать математические операции и возвращать результат.

Параметры функции — firstNumber, secondNumber и operator.

Параметры firstNumber, secondNumber — операнды, параметр operator - оператор.

Все значения приходят в виде строк, в том числе и операторы. В третьем параметре содержится один из операторов: сложение ('+'), вычитание ('-'), умножение ('*'), деление ('/').

В зависимости от оператора программа должна совершать разные операции: складывать первое число со вторым, вычитать из первого числа второе, умножать первое на второе, делить первое на второе.

Не забудь сделать из строк с числами настоящие числа.

*/
-----------------------------------------------------------------------------
№5
let getDiet = function (calory,limit) {
  let count=0;
  let allowedCalory=0;
  
  for (let i=0; i<calory.length; i++) {
    allowedCalory+=calory[i];
    if (allowedCalory <= limit) {
      count++;
    }
  }
  return count;
}
/* Техническое задание

Мяу! Напиши программу, которая будет анализировать мой суточный рацион.

Оформи программу в виде функции getDiet. Она должна принимать два параметра: массив с калорийностью блюд и лимит калорий на день. Названия параметров могут быть любыми.

Программа должна возвращать количество блюд из массива, которые я могу съесть и не превысить допустимые калории. Блюда будут съедаться по порядку, начиная с первого элемента в массиве.

*/

-----------------------------------------------------------------------------------
№6

let getDocumentsNumbers = function(documents, year) {
  let count=0;
  for (let i=0; i < documents.length; i++) {
    if (documents[i].indexOf(year,4)===4)  {
      count++;
    }
  }
  return count;
}

/* Техническое задание

Мяу! Напиши программу getDocumentsNumbers, которая будет возвращать число документов за указанный год.

У функции должно быть два параметра: массив с названиями документов и год, за который надо найти документы. Названия параметров могут быть любыми. Даты из массива записаны в виде строк.

Функция должна возвращать количество документов, в названии которых есть необходимый год.

Если таких документов в массиве нет, функция должна возвращать 0.

*/


let getDocumentsNumbers = function(documents, yearCheck) {
  
  let total=0;
  let year=String(yearCheck);
  
  for (let i=0; i<documents.length; i++) {
  let name=documents[i];
  let count=0;
  
    for(let j=4; j<name.length; j++) {
      if(name[j]===year[j-4]) {
        count++;
        if (count===4) {
         total++; 
        }
      }
    }
  }
  return total;
}

----------------------------------------------------------------------------
№7

let incomeTax = 13;
let contributions = 30;

let calculateExpenses = function(netSalary) {
  let expenses = Math.round(netSalary/0.87*1.3);
  return expenses;
}

/* Техническое задание

Напиши функцию calculateExpenses, которая вычисляет ежемесячные затраты компании на сотрудника из «чистой» зарплаты работника.

Функция должна принимать параметр netSalary – это «чистая» зарплата после вычета налогов.

В переменную incomeTax записан размер НДФЛ в процентах.

В переменной contributions указан общий размер взносов в процентах.

Функция должна возвращать общие затраты компании на сотрудника. Округляй результат вычислений с помощью Math.round.

*/

---------------------------------------------------------------------------
№8

let getYears = function(firstYear, lastYear, olimpNumber) {
  let years=[];
  
  for (i=firstYear; i<=lastYear; i++) {
    let yearCheck=String(i);
    let sum = 0;
    for (let j=0; j<yearCheck.length; j++) {
      let oneChart = Number(yearCheck[j]); 
      sum+=oneChart;
      }
    if (sum===olimpNumber) {
      years.push(i);
    }
  }  
 
  return years;
}

getYears (10225, 20220, 4);

/* Техническое задание

Мяу! Напиши программу getYears, которая будет возвращать массив с подходящими датами для Олимпиады.

Функция должна принимать на вход три параметра. Первый параметр — год, с которого нужно начать вести отсчёт (включительно). Второй — год, которым этот отсчёт надо закончить (включительно). Третий — число, которое обозначает сумму цифр в номере года.

Названия параметров могут быть любыми.

Годы в массиве должны быть числами и располагаться по возрастанию, от меньшего к большему.

*/
----------------------------------------------------------------------------------------
№9

let getDayOfWeek = function(firstDayName, numberOfDay) {
  let week = ['понедельник','вторник','среда','четверг','пятница','суббота','воскресенье'];
  let day = '';
  for(let i=0; i<week.length; i++) {
    if (firstDayName === week[i]) {
      console.log(i);
      let count=numberOfDay%7 + i - 1;
      if (count>6) {
        count=count%7;
      }
      day = week[count];
      console.log(count);
    }
  }
  return day;
}
/* Техническое задание

Мяу! Напиши для меня программу-календарь.

Оформи программу в виде функции getDayOfWeek. У неё должно быть два параметра: день недели, на который выпадает первое число месяца, и число, для которого нужно найти день недели в этом месяце.

Функция должна возвращать строку с названием дня недели. Название должно быть написано с маленькой буквы в именительном падеже: 'понедельник', 'вторник' и так далее.

*/
-------------------------------------------------------------
№10

let calculateRoots = function (a,b,c) {
  let disc = b*b-4*a*c;
  if (disc<0) {
   return 'Корней нет'; 
  }
  if (disc===0) {
    let root1 = -b/(2*a);
    return 'Корень равен '+ root1;
  }
  if (disc > 0) {
    let root1=(-b + Math.sqrt(disc)) / (2 * a);
    let root2=(-b - Math.sqrt(disc)) / (2 * a);
    return 'Первый корень равен ' + root1 + ', второй корень равен ' + root2;
  }
}

/* Техническое задание

Мяу! Напиши функцию calculateRoots, которая будет считать корни через дискриминант.

Формула дискриминанта выглядит так: b * b - 4 * a * c. Функция должна принимать на вход три параметра: a, b, c. Это коэффициенты из формулы дискриминанта.

Если полученное число меньше 0, функция должна возвращать строку 'Корней нет'.

Если результат равен 0, корень в уравнении один. Функция должна возвращать строку 'Корень равен ' + найденный корень. Формула корня в этом случае такая: -b / (2 * a).

А вот если дискриминант больше 0, корня два. Придётся посчитать каждый и добавить результат в строку. Формула для первого корня: (-b + √D) / (2 * a). Формула для второго корня: (-b - √D) / (2 * a). Функция должна возвращать строку 'Первый корень равен ' + первый корень + ', второй корень равен ' + второй корень.

*/
---------------------------------------------------------------------------------------
№11

let calculateDeposit = function (initialDeposit, annualPercent, term, isCapitalize) {
  let deposit=initialDeposit;
  
  if (isCapitalize) {
    for(let i=1; i<=term; i++) {
      deposit+=deposit*(annualPercent/1200);
    }
  }
  else {
    deposit+=deposit*(annualPercent/1200*term);
  }
  return Math.floor(deposit);
};


/* Техническое задание

Мяу! Мне нужно посчитать, сколько я накоплю, если положу деньги в банк на разных условиях. Оформи программу, как функцию calculateDeposit с четырьмя параметрами:

1. начальная сумма депозита;
2. процент годовых (число от 0 до 100);
3. срок вклада в месяцах;
4. с капитализацией процентов или нет (флаг с булевым значением).

Функция должна возвращать итоговую сумму депозита, округлённую до рублей с помощью Math.floor. Название параметров используй любые.

Если вклад простой, то процент годовых делится на 12 и умножается на срок вклада, а затем начальная сумма увеличивается на посчитанный процент.

Вклад с капитализацией считается сложнее: каждый месяц к сумме депозита прибавляются накопленный за месяц процент годовых (не забывай делить процент на 12), а процент следующего месяца считается уже от увеличенной суммы депозита.

*/
